[
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "cdcdata-exercise",
    "section": "",
    "text": "Exploring CDC Data: Vaccination Coverage Among Pregnant Women\n\n\nDescription of the data\nI found this data set from the CDC’s data log under the pregnancy and vaccination section. The data was provided by the National Center for Immunization and Respiratory Diseases (NCIRD), and the information was collected through the Pregnancy Risk Assessment Monitoring System (PRAMS). Information includes vaccination rates at the state level for influenza and tetanus toxoid, reduced diptheria toxoid, and aceullar pertussis (Tdap) for women who recently gave birth. Variables include vaccine type, geography, survey year/influenza season, dimension (age or race), and estimation of vaccination coverage with 95% confidence interval. It was most recently updated on December 15, 2023 and contains 4,379 observations of 9 variables. Link: https://data.cdc.gov/Pregnancy-Vaccination/Vaccination-Coverage-among-Pregnant-Women/h7pm-wmjc/about_data\n\n\nRead and load the data\nI loaded two packages for this step: readr and here. I called the data ‘pregvacc’. After reading and loading the data, I confirmed that there were 4,379 observations of 9 variables.\n\n## load packages\nlibrary(readr)\nlibrary(here)\n\nhere() starts at /Users/cassiaroth/Documents/GitHub/MADARoth/taylorglass-MADA-portfolio\n\n##read in data and find dimensions\npregvacc &lt;- read_csv(here(\"cdcdata-exercise\", \"Vaccination_Coverage_among_Pregnant_Women_20240205.csv\"))\n\nRows: 4379 Columns: 9\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Vaccine, Geography Type, Geography, Dimension Type, Dimension, Esti...\ndbl (2): Survey Year/Influenza Season, Sample Size\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndim(pregvacc)\n\n[1] 4379    9\n\n\n\n\nProcessing the data\nUsing the naniar package to discover missingness of the data shows that this data set is pretty clean. Sample size is the only variable with missing data, and it has 215 missing observations. Sample size is an important variable for determining the reliability of the vaccination coverage estimation percentages. The ‘data quality’ section of the CDC page for this data set notes that observations marked with an asterisk are unreliable due to a sample size of less than 30. After exploring the variable, the minimum value is exactly 30, so none of the estimates are less than 30. I feel confident in removing this variable from the data set because all of the vaccination coverage estimates with complete data are reliable based on the sample size variable.\n\n## load packages\nlibrary(naniar)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\n\n## explore missingness of the data \ngg_miss_var(pregvacc)\n\n\n\n\n\n\n\nsum(is.na(pregvacc$`Sample Size`))\n\n[1] 215\n\nsummary(pregvacc$`Sample Size`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   30.0   167.0   320.5   797.2   655.2 43737.0     215 \n\n## create new dataset without the sample size variable\npregvacc2 &lt;- pregvacc %&gt;% select(-`Sample Size`)\n\nUsing the head() function, I saw “NR” in the estimate of vaccination coverage and confidence interval variables, which also represents missing data. With assistance from AI tools, I wrote a function to rid the data of any “NR” variables or special characters using the dplyr and stringr packages. I found that there are 442 missing observations of the estimate variable and confidence interval variables. Considering that the data set contains 4,379 observations, only 10% of the observations have a missing estimate value for vaccination coverage. I think it is okay to remove the missing observations in this scenario because each state has multiple observations across several years of PRAMS data. Information about vaccination among pregnant women is included for all 50 states based on various ages and races/ethnicities, so I think it is reasonable to remove 10% of the data set for this analysis.\n\n## examine data again \nhead(pregvacc2)\n\n# A tibble: 6 × 8\n  Vaccine   `Geography Type` Geography Survey Year/Influenza …¹ `Dimension Type`\n  &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;           \n1 Influenza States           Alaska                        2012 Age             \n2 Influenza States           Alaska                        2020 Age             \n3 Influenza States           Alaska                        2020 Race and Ethnic…\n4 Influenza States           Alaska                        2012 Age             \n5 Influenza States           Alaska                        2012 Race and Ethnic…\n6 Influenza States           Alaska                        2020 Age             \n# ℹ abbreviated name: ¹​`Survey Year/Influenza Season`\n# ℹ 3 more variables: Dimension &lt;chr&gt;, `Estimate (%)` &lt;chr&gt;, `95% CI (%)` &lt;chr&gt;\n\n## create a function to clean the data\nclean_data &lt;- function(data) {\n  data[data == 'NR*'] &lt;- NA\n  data &lt;- data %&gt;% mutate_if(is.character, str_replace_all, pattern = \"[^a-zA-Z0-9\\\\s]\", replacement = \"\")\n  return(data)\n}\n\n## use the clean_data function to create the third version of the dataset\npregvacc3 &lt;- clean_data(pregvacc2)\n\n## explore the new NAs created by the clean_data function \ngg_miss_var(pregvacc3)\n\n\n\n\n\n\n\nsum(is.na(pregvacc3$`Estimate (%)`))\n\n[1] 442\n\nsum(is.na(pregvacc3$`95% CI (%)`))\n\n[1] 442\n\nmissing &lt;- 442/4379*100\nhead(pregvacc3)\n\n# A tibble: 6 × 8\n  Vaccine   `Geography Type` Geography Survey Year/Influenza …¹ `Dimension Type`\n  &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;           \n1 Influenza States           Alaska                        2012 Age             \n2 Influenza States           Alaska                        2020 Age             \n3 Influenza States           Alaska                        2020 Race and Ethnic…\n4 Influenza States           Alaska                        2012 Age             \n5 Influenza States           Alaska                        2012 Race and Ethnic…\n6 Influenza States           Alaska                        2020 Age             \n# ℹ abbreviated name: ¹​`Survey Year/Influenza Season`\n# ℹ 3 more variables: Dimension &lt;chr&gt;, `Estimate (%)` &lt;chr&gt;, `95% CI (%)` &lt;chr&gt;\n\n\nAfter dropping the NA values, the data set contains 3,937 observations of 8 variables with no missing values. The head() function revealed that the estimate percentage is a character variable, which is incorrect because it should be a numeric variable. I mutated the variable to be numeric and divided by 100, so it will have the typical percentage format.\n\n## create final dataset with no NAs to be used for exploratory analyis \npregvacc4 &lt;- na.omit(pregvacc3)\ndim(pregvacc4)\n\n[1] 3937    8\n\nsum(is.na(pregvacc4))\n\n[1] 0\n\n## check that all variables appear to be complete\nhead(pregvacc4)\n\n# A tibble: 6 × 8\n  Vaccine   `Geography Type` Geography Survey Year/Influenza …¹ `Dimension Type`\n  &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;           \n1 Influenza States           Alaska                        2012 Age             \n2 Influenza States           Alaska                        2020 Age             \n3 Influenza States           Alaska                        2012 Age             \n4 Influenza States           Alaska                        2020 Age             \n5 Influenza States           Alaska                        2020 Age             \n6 Influenza States           Alaska                        2020 Age             \n# ℹ abbreviated name: ¹​`Survey Year/Influenza Season`\n# ℹ 3 more variables: Dimension &lt;chr&gt;, `Estimate (%)` &lt;chr&gt;, `95% CI (%)` &lt;chr&gt;\n\ntail(pregvacc4)\n\n# A tibble: 6 × 8\n  Vaccine `Geography Type` Geography Survey Year/Influenza Se…¹ `Dimension Type`\n  &lt;chr&gt;   &lt;chr&gt;            &lt;chr&gt;                          &lt;dbl&gt; &lt;chr&gt;           \n1 Tdap    States           Minnesota                       2018 Race and Ethnic…\n2 Tdap    States           Minnesota                       2018 Age             \n3 Tdap    States           Minnesota                       2019 Age             \n4 Tdap    States           Minnesota                       2020 Age             \n5 Tdap    States           Minnesota                       2019 Age             \n6 Tdap    States           Minnesota                       2018 Age             \n# ℹ abbreviated name: ¹​`Survey Year/Influenza Season`\n# ℹ 3 more variables: Dimension &lt;chr&gt;, `Estimate (%)` &lt;chr&gt;, `95% CI (%)` &lt;chr&gt;\n\n## clean vaccination estimate variable to follow normal percentage format \npregvacc4 &lt;- pregvacc4 %&gt;% \n                mutate(`Estimate (%)` = as.numeric(`Estimate (%)`)) %&gt;%\n                mutate(`Estimate (%)` = `Estimate (%)` / 100)\nclass(pregvacc4$`Estimate (%)`) # check if class mutation worked\n\n[1] \"numeric\"\n\nsummary(pregvacc4$`Estimate (%)`) # check if format mutation worked \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.520   5.370   6.380   6.234   7.280   9.960 \n\n\nThe 95% confidence interval has the same issue of being a character variable instead of numeric variable, and the upper and lower bounds are separated by the word “to”, which prevents me from directly converting it to numeric. I separated the variable into upper and lower bounds using the separate() function from the tidyr package, so I could convert the variable to the numeric format. I also had to divide the values by 100 once they were numeric, so it would be in a normal percentage format.\n\n## load packages \nlibrary(tidyr)\n\n## separate the confidence interval variable to convert it to numeric in a typical percent format\npregvacc4 &lt;- pregvacc4 %&gt;% \n                separate(`95% CI (%)`, into = c(\"95% CI Lower\", \"95% CI Upper\"), sep = \"to\", convert = TRUE)\nhead(pregvacc4) # check if separation worked\n\n# A tibble: 6 × 9\n  Vaccine   `Geography Type` Geography Survey Year/Influenza …¹ `Dimension Type`\n  &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;           \n1 Influenza States           Alaska                        2012 Age             \n2 Influenza States           Alaska                        2020 Age             \n3 Influenza States           Alaska                        2012 Age             \n4 Influenza States           Alaska                        2020 Age             \n5 Influenza States           Alaska                        2020 Age             \n6 Influenza States           Alaska                        2020 Age             \n# ℹ abbreviated name: ¹​`Survey Year/Influenza Season`\n# ℹ 4 more variables: Dimension &lt;chr&gt;, `Estimate (%)` &lt;dbl&gt;,\n#   `95% CI Lower` &lt;dbl&gt;, `95% CI Upper` &lt;int&gt;\n\npregvacc4 &lt;- pregvacc4 %&gt;% \n                mutate(`95% CI Lower` = as.numeric(`95% CI Lower`) / 100) %&gt;% \n                mutate(`95% CI Upper` = as.numeric(`95% CI Upper`) / 100)\nhead(pregvacc4) # check if mutation worked \n\n# A tibble: 6 × 9\n  Vaccine   `Geography Type` Geography Survey Year/Influenza …¹ `Dimension Type`\n  &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;           \n1 Influenza States           Alaska                        2012 Age             \n2 Influenza States           Alaska                        2020 Age             \n3 Influenza States           Alaska                        2012 Age             \n4 Influenza States           Alaska                        2020 Age             \n5 Influenza States           Alaska                        2020 Age             \n6 Influenza States           Alaska                        2020 Age             \n# ℹ abbreviated name: ¹​`Survey Year/Influenza Season`\n# ℹ 4 more variables: Dimension &lt;chr&gt;, `Estimate (%)` &lt;dbl&gt;,\n#   `95% CI Lower` &lt;dbl&gt;, `95% CI Upper` &lt;dbl&gt;\n\n\n\n\nExploratory/Descriptive Analysis on the clean data\nAfter cleaning and processing the data, the final data set has 3,937 observations of 9 variables. The categorical variables include vaccine, geography type, geography, dimension type, and dimension. The vaccine variable has two categories: influenza and tdap. The influenza vaccine is twice as common as the tdap vaccine considering that it accounts for 66.6% of vaccine observations. I used AI tools to help create a simple table displaying what percent is in each category.\n\n## find basic facts about final clean dataset\ndim(pregvacc4)\n\n[1] 3937    9\n\nstr(pregvacc4)\n\ntibble [3,937 × 9] (S3: tbl_df/tbl/data.frame)\n $ Vaccine                     : chr [1:3937] \"Influenza\" \"Influenza\" \"Influenza\" \"Influenza\" ...\n $ Geography Type              : chr [1:3937] \"States\" \"States\" \"States\" \"States\" ...\n $ Geography                   : chr [1:3937] \"Alaska\" \"Alaska\" \"Alaska\" \"Alaska\" ...\n $ Survey Year/Influenza Season: num [1:3937] 2012 2020 2012 2020 2020 ...\n $ Dimension Type              : chr [1:3937] \"Age\" \"Age\" \"Age\" \"Age\" ...\n $ Dimension                   : chr [1:3937] \"18 Years\" \"18 Years\" \"35 Years\" \"35 Years\" ...\n $ Estimate (%)                : num [1:3937] 4.92 6.4 5.49 6.47 6.27 6.68 4.89 4.83 4.68 5.92 ...\n $ 95% CI Lower                : num [1:3937] 4.53 6.04 4.36 5.6 5.79 5.92 4.18 4.3 4.12 5.35 ...\n $ 95% CI Upper                : num [1:3937] 5.31 6.75 6.58 7.28 6.73 7.38 5.61 5.36 5.24 6.47 ...\n\n## create percentage table with categories of vaccine variable\nvacc_table &lt;- table(pregvacc4$Vaccine)\npercentage_table &lt;- prop.table(vacc_table) * 100\nprint(percentage_table)\n\n\nInfluenza      Tdap \n 66.67513  33.32487 \n\n\nUsing the code above as a template, I created a summary table for each categorical variable. The geography type variable is 95.9% states, with the other 4.1% of observations being at the national level. The geography categorical variable has 51 options with differentiation between New York City and the rest of New York state and inclusion of Puerto Rico. Wisconsin makes up the highest percentage of the geography variable with 4.06% of observations, and Indiana makes up the lowest percentage at 0.2% of observation. The two dimension types are split almost evenly with 55.65% of observations belonging to age and 44.35% of observations belonging to race and ethnicity. There are 4 categories for age: 18 years, 18-24 years, 25-34 years, and 35 years. Each of these age categories account for about 14% of dimension observations. There are 4 categories for race/ethnicity: Black Non-Hispanic, Hispanic, Other or Multiple Races Non-Hispanic, and White Non-Hispanic. White Non-Hispanic is the largest of the race and ethnicity categories with 13.86% of observations for the dimension variable.\n\n## create percentage table with categories of geography type variable\ngeotype_table &lt;- table(pregvacc4$`Geography Type`)\npercentage_table2 &lt;- prop.table(geotype_table) * 100\nprint(percentage_table2)\n\n\n National    States \n 4.064008 95.935992 \n\n## create percentage table with categories of geography variable\ngeo_table &lt;- table(pregvacc4$Geography)\npercentage_table3 &lt;- prop.table(geo_table) * 100\nprint(percentage_table3)\n\n\n             Alabama               Alaska              Arizona \n           1.2446025            1.5494031            0.1778004 \n            Arkansas             Colorado          Connecticut \n           1.9558039            3.0988062            1.6256033 \n            Delaware District of Columbia              Florida \n           4.0132080            0.7112014            0.3556007 \n             Georgia               Hawaii             Illinois \n           1.2192024            2.1082042            2.8194056 \n             Indiana                 Iowa               Kansas \n           0.2032004            2.3114046            0.8890018 \n            Kentucky            Louisiana                Maine \n           0.6096012            2.2606045            1.2954026 \n            Maryland        Massachusetts             Michigan \n           1.8288037            3.2512065            2.9464059 \n           Minnesota          Mississippi             Missouri \n           1.8288037            1.2192024            3.4798070 \n             Montana             Nebraska        New Hampshire \n           1.6256033            2.8448057            1.6510033 \n          New Jersey           New Mexico             New York \n           2.0320041            1.9558039            3.2004064 \n      North Carolina         North Dakota   NYCity of New York \n           0.6096012            0.8128016            3.4544069 \n     NYRest of state                 Ohio             Oklahoma \n           2.7178054            0.5588011            3.0226060 \n              Oregon         Pennsylvania          Puerto Rico \n           1.4224028            3.8608077            0.6350013 \n        Rhode Island         South Dakota            Tennessee \n           2.0320041            1.0160020            1.1176022 \n               Texas        United States                 Utah \n           0.8128016            4.0640081            2.7686055 \n             Vermont             Virginia           Washington \n           2.4384049            2.6416053            3.2512065 \n       West Virginia            Wisconsin              Wyoming \n           1.1430023            4.0640081            1.2446025 \n\n## create percentage table with categories of dimension type variable\ndimtype_table &lt;- table(pregvacc4$`Dimension Type`)\npercentage_table3 &lt;- prop.table(dimtype_table) * 100\nprint(percentage_table3)\n\n\n               Age Race and Ethnicity \n          55.65151           44.34849 \n\n## create percentage table with categories of dimension variable\ndim_table &lt;- table(pregvacc4$Dimension)\npercentage_table4 &lt;- prop.table(dim_table) * 100\nprint(percentage_table4)\n\n\n                           18 Years                          1824 Years \n                          14.020828                           13.944628 \n                         2534 Years                            35 Years \n                          14.020828                           13.665227 \n                  Black NonHispanic                            Hispanic \n                           9.728219                           10.820422 \nOther or Multiple Races NonHispanic                   White NonHispanic \n                           9.931420                           13.868428 \n\n\nTo explore the continuous variables, I will make plots to see if they are approximately normal. The mean of the vaccination estimate among pregnant women is 6.23%, and the standard deviation is 1.497. I had to convert the estimate variable to a factor to create a bar graph that displayed each of the unique discrete observations. The distribution looks approximately normal, but it is slightly skewed to the left.\n\n## load packages \nlibrary(ggplot2)\n\n## find summary values while variable is numeric \nmean(pregvacc4$`Estimate (%)`)\n\n[1] 6.233548\n\nsd(pregvacc4$`Estimate (%)`)\n\n[1] 1.496931\n\n## convert variable to factor to be visualized\npregvacc4 &lt;- pregvacc4 %&gt;% \n                mutate(`Estimate (%)` = as.factor(`Estimate (%)`))\nclass(pregvacc4$`Estimate (%)`) ## check if mutation worked \n\n[1] \"factor\"\n\n## create visualization of the distribution of estimate (%) variable\nggplot(pregvacc4, aes(x=`Estimate (%)`)) + \n    geom_bar(position = \"dodge\") + \n    labs(x = \"Estimate of Vaccination Percentage\",\n         y= \"Frequency\") \n\n\n\n\n\n\n\n\nI would expect the lower and upper bound of the 95% confidence interval (CI) to have the same distribution as the estimate variable because the estimate variable is used to calculate the CI. Before converting the variables to a factor type to create the bar graph, I found the mean and standard deviation for each one while the variable was still numeric. The mean for the lower bound of the 95% CI 5.56%, and the standard deviation was 1.53. The mean for the upper bound of the 95% CI is 6.86%, and the standard deviation is 1.46. After creating two more bar graphs using the variables as factors, my expectations were met, and each distribution for the bounds of the confidence interval are approximately normal with a slight skew to the left.\n\n## find summary values while variable is numeric \nmean(pregvacc4$`95% CI Lower`)\n\n[1] 5.555558\n\nsd(pregvacc4$`95% CI Lower`)\n\n[1] 1.531577\n\n## find summary values while variable is numeric\nmean(pregvacc4$`95% CI Upper`)\n\n[1] 6.86397\n\nsd(pregvacc4$`95% CI Upper`)\n\n[1] 1.463774\n\n## convert variable to factor to be visualized \npregvacc4 &lt;- pregvacc4 %&gt;% \n                mutate(`95% CI Lower` = as.factor(`95% CI Lower`))\nclass(pregvacc4$`95% CI Lower`) ## check if conversion worked\n\n[1] \"factor\"\n\n##create visualization of the distribution of 95% CI Lower variable\nggplot(pregvacc4, aes(x=`95% CI Lower`)) + \n    geom_bar(position = \"dodge\") + \n    labs(x = \"Lower Bound of 95% Confidence Interval for Estimate\",\n         y= \"Frequency\") \n\n\n\n\n\n\n\n## convert variable to factor to be visualized \npregvacc4 &lt;- pregvacc4 %&gt;% \n                mutate(`95% CI Upper` = as.factor(`95% CI Upper`))\nclass(pregvacc4$`95% CI Upper`) ## check if conversion worked\n\n[1] \"factor\"\n\n##create visualization of the distribution of 95% CI Upper variable\nggplot(pregvacc4, aes(x=`95% CI Upper`)) + \n    geom_bar(position = \"dodge\") + \n    labs(x = \"Upper Bound of 95% Confidence Interval for Estimate\",\n         y= \"Frequency\") \n\n\n\n\n\n\n\n\n\n\nCassia Roth created this section.\nFirst, lets make sure we have all necessary packages loaded.\n\n#Load required packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ purrr     1.0.2\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:naniar':\n\n    n_complete\n\nlibrary(gtsummary)\n\n#BlackLivesMatter\n\n\nNext, I asked ChatGPT the following prompt: Can you write R code that generates a dataset of 3937 observations of vaccination status for women who recently gave birth. Women are between 18 and 35 years. The dataset should include seven variables (vaccine, state, year, age, race/ethnicity, estimate of vaccine coverage in percentage, 95% CI lower, 95% CI upper). 66% of the vaccination observations should be influenza vaccines and 33 percent should be Tdap vaccines. Then, given Table 4 Tessa created above, I put that into ChatGPT, so it should know the percentage of observations for each state. Then, I asked it to add code so that 50% of observations were in the age groups 18-24 and 50% were in the age groups 25-34; and that 21% of observations were Black-non Hispanic, 25% were Hispanic, 31% were White non-Hispanic, and 23% were Other. Last, I asked it to make sure the years for the data were between 2012 and 2021. I also asked it to make sure that the mean vaccination coverage was 6.23% with a standard deviation of 1.497. I finally asked it to calculate the 95% confidence interval for the mean vaccination coverage and display it. Calculating the confidence intervals took quite a bit of back and forth with ChatGPT.\nNote: I removed the variable geography type (state), since that wasn’t really necessary to duplicate the data. I also combined the age categories 18 and 18-24 and 25-34 and 35 for ease of use.\nThis is the fully workable code it produced.\n\n#Set seed for reproducibility\nset.seed(123)\n\n#Define number of observations to generate\nn_observations &lt;- 3937 #based on the observations of 9 variables stated above\n\n# Define the percentage of observations for each vaccine type\npercent_influenza &lt;- 0.66\npercent_tdap &lt;- 0.33\n\n# Generate vaccine types based on the specified percentages\nvaccine_types &lt;- sample(c(\"Influenza\", \"Tdap\"), size = n_observations, \n                        replace = TRUE, prob = c(percent_influenza, percent_tdap))\n\n# Define the states and their corresponding percentages of observations\nstates &lt;- c(\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"Colorado\", \"Connecticut\",\n            \"Delaware\", \"District of Columbia\", \"Florida\", \"Georgia\", \"Hawaii\", \"Illinois\",\n            \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\",\n            \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\",\n            \"Nebraska\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\",\n            \"North Dakota\", \"NYCity of New York\", \"NYRest of state\", \"Ohio\", \"Oklahoma\", \"Oregon\",\n            \"Pennsylvania\", \"Puerto Rico\", \"Rhode Island\", \"South Dakota\", \"Tennessee\", \"Texas\",\n            \"United States\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\",\n            \"Wisconsin\", \"Wyoming\")\n\npercentages &lt;- c(1.2446025, 1.5494031, 0.1778004, 1.9558039, 3.0988062, 1.6256033,\n                 4.0132080, 0.7112014, 0.3556007, 1.2192024, 2.1082042, 2.8194056,\n                 0.2032004, 2.3114046, 0.8890018, 0.6096012, 2.2606045, 1.2954026,\n                 1.8288037, 3.2512065, 2.9464059, 1.8288037, 1.2192024, 3.4798070,\n                 1.6256033, 2.8448057, 1.6510033, 2.0320041, 1.9558039, 3.2004064,\n                 0.6096012, 0.8128016, 3.4544069, 2.7178054, 0.5588011, 3.0226060,\n                 1.4224028, 3.8608077, 0.6350013, 2.0320041, 1.0160020, 1.1176022,\n                 0.8128016, 4.0640081, 2.7686055, 2.4384049, 2.6416053, 3.2512065,\n                 1.1430023, 4.0640081, 1.2446025)\n\n# Normalize percentages to sum to 1\npercentages &lt;- percentages / sum(percentages)\n\n# Generate state observations based on the specified percentages\nstate_obs &lt;- sample(states, size = n_observations, replace = TRUE, prob = percentages)\n\n# Generate random years between 2012 and 2021\nyears &lt;- sample(2012:2021, size = n_observations, replace = TRUE)\n\n# Generate random ages between 18 and 35\nage_groups &lt;- sample(c(\"18-24\", \"25-34\"), size = n_observations, replace = TRUE, prob = c(0.5, 0.5))\n\n# Generate random race/ethnicity\nrace_ethnicity &lt;- sample(c(\"Black-non Hispanic\", \"Hispanic\", \"White non-Hispanic\", \"Other\"), \n                         size = n_observations, replace = TRUE, prob = c(0.21, 0.25, 0.31, 0.23))\n\n# Generate random estimates of vaccine coverage in percentage\nvaccine_coverage &lt;- rnorm(n_observations, mean = 6.23, sd = 1.497)\n\n# Calculate the mean and standard deviation of the generated vaccine coverage data\nmean_coverage &lt;- mean(vaccine_coverage)\nsd_coverage &lt;- sd(vaccine_coverage)\n\n# Calculate the standard error (SE) of the mean\nse_mean &lt;- sd_coverage / sqrt(n_observations)\n\n# Calculate the margin of error (ME) for a 95% confidence level (assuming normal distribution)\n# For a 95% confidence interval, the critical z-value is approximately 1.96\nz_value &lt;- qnorm(0.975)  # Two-tailed\n\n# Initialize variables to store lower and upper bounds of the confidence intervals\nlower_ci &lt;- numeric(n_observations)\nupper_ci &lt;- numeric(n_observations)\n\n#Setting fixed CIs for each observation to avoid bootstrapping\nlower_ci &lt;- vaccine_coverage - z_value * se_mean\nupper_ci &lt;- vaccine_coverage + z_value * se_mean\n\n# Combine all variables into a data frame\nvaccination_data &lt;- data.frame(vaccine = vaccine_types,\n                               state = state_obs,\n                               year = years,\n                               age_group = age_groups,\n                               race_ethnicity = race_ethnicity,\n                               estimate_coverage_percentage = vaccine_coverage,\n                               lower_ci = lower_ci,\n                               upper_ci = upper_ci)\n\n# Display the first few rows of the dataset and get summary\nhead(vaccination_data)\n\n    vaccine              state year age_group     race_ethnicity\n1 Influenza          Wisconsin 2018     25-34              Other\n2      Tdap            Vermont 2012     18-24           Hispanic\n3 Influenza           Maryland 2019     25-34              Other\n4      Tdap            Alabama 2021     25-34 White non-Hispanic\n5      Tdap      United States 2021     18-24           Hispanic\n6 Influenza NYCity of New York 2020     25-34 Black-non Hispanic\n  estimate_coverage_percentage  lower_ci  upper_ci\n1                     8.470043  8.423233  8.516853\n2                     5.660458  5.613648  5.707267\n3                    10.149212 10.102402 10.196022\n4                     6.185569  6.138759  6.232379\n5                     4.994664  4.947854  5.041473\n6                     5.991605  5.944795  6.038414\n\nskim(vaccination_data)\n\n\nData summary\n\n\nName\nvaccination_data\n\n\nNumber of rows\n3937\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nvaccine\n0\n1\n4\n9\n0\n2\n0\n\n\nstate\n0\n1\n4\n20\n0\n51\n0\n\n\nage_group\n0\n1\n5\n5\n0\n2\n0\n\n\nrace_ethnicity\n0\n1\n5\n18\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1\n2016.48\n2.9\n2012.00\n2014.00\n2016.00\n2019.00\n2021.00\n▇▇▇▇▇\n\n\nestimate_coverage_percentage\n0\n1\n6.23\n1.5\n1.22\n5.24\n6.25\n7.27\n10.87\n▁▃▇▅▁\n\n\nlower_ci\n0\n1\n6.19\n1.5\n1.17\n5.20\n6.20\n7.22\n10.83\n▁▃▇▅▁\n\n\nupper_ci\n0\n1\n6.28\n1.5\n1.27\n5.29\n6.29\n7.32\n10.92\n▁▃▇▅▁\n\n\n\n\n\nThen, I plotted the mean and standard distribution of the vaccine coverage variable. Although my tables are in a different format than Tessa’s above, they have a similar distribution.\n\n#Find summary values\nmean(vaccination_data$estimate_coverage_percentage)\n\n[1] 6.233056\n\nsd(vaccination_data$estimate_coverage_percentage)\n\n[1] 1.498551\n\nmean(vaccination_data$lower_ci)\n\n[1] 6.186246\n\nsd(vaccination_data$lower_ci)\n\n[1] 1.498551\n\nmean(vaccination_data$upper_ci)\n\n[1] 6.279866\n\nsd(vaccination_data$upper_ci)\n\n[1] 1.498551\n\n# Plotting the distribution of vaccine coverage percentage\nggplot(vaccination_data, aes(x = estimate_coverage_percentage)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Distribution of Vaccine Coverage Percentage\",\n       x = \"Vaccine Coverage Percentage\",\n       y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Plotting the distribution of mean and standard deviation of vaccine coverage percentage\nggplot(vaccination_data, aes(x = estimate_coverage_percentage)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  geom_vline(aes(xintercept = mean(estimate_coverage_percentage, na.rm = TRUE)), \n             color = \"red\", linetype = \"dashed\", size = 1) +\n  geom_vline(aes(xintercept = mean(estimate_coverage_percentage, na.rm = TRUE) + \n                   sd(estimate_coverage_percentage, na.rm = TRUE)), \n             color = \"green\", linetype = \"dashed\", size = 1) +\n  geom_vline(aes(xintercept = mean(estimate_coverage_percentage, na.rm = TRUE) - \n                   sd(estimate_coverage_percentage, na.rm = TRUE)), \n             color = \"green\", linetype = \"dashed\", size = 1) +\n  labs(title = \"Distribution of Vaccine Coverage Percentage with Mean and Standard Deviation\",\n       x = \"Vaccine Coverage Percentage\",\n       y = \"Frequency\") +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nFinally, I will plot the distribution of both the lower and upper bounds of the 95% CI. As you can see from the output, neither distribution appears to be normally distributed, even though the mean and standard deviation are above, which makes me think I did something wrong, although I’m not sure what!\nEach observation has specific confidence intervals. If the observation\n\n# Plotting the distribution of lower 95% CI\nggplot(vaccination_data, aes(x = lower_ci)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Distribution of Lower 95% Confidence Interval\",\n       x = \"Lower 95% CI\",\n       y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Plotting the distribution of upper 95% CI\nggplot(vaccination_data, aes(x = upper_ci)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Distribution of Upper 95% Confidence Interval\",\n       x = \"Upper 95% CI\",\n       y = \"Frequency\") +\n  theme_minimal()"
  }
]