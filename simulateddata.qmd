---
title: "Synthetic Data Practice"
editor: visual
---
#synthetic data practice 

##setup for simple example 

```{r}
##setup-load packages
library(dplyr)
library(purrr)
library(lubridate)
library(ggplot2)
library(here)
##setup- set a seed for reproducibility
set.seed(123)
##setup-define the observations to generate
n_patients <- 100

```

##generating data

```{r}
##create an emptydataframe with placeholders for variables
syn_data <- data.frame(
  PatientID = numeric(n_patients), 
  Age = numeric(n_patients),
  Gender = character(n_patients),
  TreatmentGroup = character(n_patients),
  EnrollmentDate = lubridate::as_date(character(n_patients)),
  BloodPressure = numeric(n_patients),
  Cholesterol = numeric(n_patients),
  AdverseEvent = integer(n_patients)
)
# variable 1: patient ID
syn_data$PatientID <- 1:n_patients
# variable 2: age (numeric)
syn_data$Age <- round(rnorm(n_patients, mean = 45, sd = 10), 1)
# variable 3: gender (categorical)
syn_data$Gender <- purrr::map_chr(sample(c("Male", "Female"), n_patients, replace = TRUE), as.character)
# variable 4: treatment group (categorical)
syn_data$TreatmentGroup <- purrr::map_chr(sample(c("A", "B", "Placebo"), n_patients, replace = TRUE), as.character)
# variable 5: data of enrollment
syn_data$EnrollmentDate <- lubridate::as_date(sample(seq(from = lubridate::as_date("2022-01-01"), to = lubridate::as_date("2022-12-31"), by="days"), n_patients, replace = TRUE))
# variable 6: blood pressure (numeric)
syn_data$BloodPressure <- round(runif(n_patients, min = 90, max = 160),1)
# variable 7: cholesterol (numeric & independent of treatment)
syn_data$Cholesterol <- round(rnorm(n_patients, mean = 200, sd = 30), 1)
# variable 8: adverse event 
syn_data$AdverseEvent <- purrr::map_int(sample(0:1, n_patients, replace = TRUE, prob = c(0.8, 0.2)), as.integer)
# print the first few rows of the generated data
head(syn_data)

#save the simulated data to a CSV and rds file
write.csv(syn_data, here("syn_data.csv"), row.names = FALSE)
```

##checking data 
```{r}
## look at the generated data
summary(syn_data)
```
```{r}
dplyr::glimpse(syn_data)
```
```{r}
#frequency table for adverse events stratified by treatment
table(syn_data$AdverseEvent,syn_data$TreatmentGroup)
```
```{r}
## ggplot2 boxplot for cholesterol by treatment group
ggplot(syn_data, aes(x=TreatmentGroup, y=Cholesterol)) +
  geom_boxplot() +
  labs(x= "Treatment Group", y= "Cholesterol Level") +
  theme_bw()
```

## setup for complex example 
```{r}
# make sure the packages are installed
# load required packages
library(dplyr)
library(ggplot2)
library(here)
# Set seed for reproducibility
set.seed(123)
# Number of patients in each treatment group
num_patients <- 20
# Number of days and samples per patient
num_days <- 7
num_samples_per_day <- 1
```

## generating data
```{r}
# treatment group levels
treatment_groups <- c("Low Dose", "High Dose")
# generate patient IDs
patient_ids <- rep(1:num_patients, each = num_days)
# generate treatment group assignments for each patient
treatment_assignments <- rep(sample(treatment_groups, num_patients, replace = TRUE), 
                             each = num_days)
# generate day IDs for each patient
day_ids <- rep(1:num_days, times = num_patients)
# function to generate drug concentrations with variability
generate_drug_concentrations <- function(day, dose_group, patient_id) {
  baseline_concentration <- ifelse(dose_group == "Low Dose", 8, 15)
  patient_variation <- rnorm(1, mean = 0, sd = 1)
  time_variation <- exp(-0.1*day)
  baseline_concentration * time_variation + patient_variation 
}
# generate drug concentrations for each sample
drug_concentrations <- mapply(generate_drug_concentrations, 
                              day = rep(day_ids, each = num_samples_per_day), 
                              dose_group = treatment_assignments,
                              patient_id = rep(1:num_patients, each = num_days))
# flatten the matrix to a vector
drug_concentrations <- as.vector(drug_concentrations)
# generate cholesterol levels for each sample 
# (assuming a positive correlation with drug concentration)
cholesterol_levels <- drug_concentrations + 
  rnorm(num_patients * num_days * num_samples_per_day, mean = 0, sd = 5)
# generate adverse events based on drug concentration 
# (assuming a higher chance of adverse events with higher concentration)
# sigmoid function to map concentrations to probabilities
adverse_events_prob <- plogis(drug_concentrations / 10) 
adverse_events <- rbinom(num_patients * num_days * num_samples_per_day, 
                         size = 1, prob = adverse_events_prob)
# create a data frame
syn_dat2 <- data.frame(
  PatientID = rep(patient_ids, each = num_samples_per_day),
  TreatmentGroup = rep(treatment_assignments, each = num_samples_per_day),
  Day = rep(day_ids, each = num_samples_per_day),
  DrugConcentration = drug_concentrations,
  CholesterolLevel = cholesterol_levels,
  AdverseEvent = adverse_events
)
```

## checking data 
```{r}
# print the first few rows of the generated dataset
print(head(syn_dat2))
```
```{r}
summary(syn_dat2)
```
```{r}
dplyr::glimpse(syn_dat2)
```
## exploratory plot 
```{r}
p1 <- ggplot(syn_dat2, aes(x = Day, y = DrugConcentration, 
                      group = as.factor(PatientID), color = TreatmentGroup)) +
  geom_line() +
  labs(title = "Drug Concentrations Over Time",
       x = "Day",
       y = "Drug Concentration",
       color = "TreatmentGroup") +
  theme_minimal()
plot(p1)
```
```{r}
p2 <- ggplot(syn_dat2, aes(x = as.factor(AdverseEvent), y = DrugConcentration, 
                           fill = TreatmentGroup)) +
  geom_boxplot(width = 0.7, position = position_dodge(width = 0.8), color = "black") +
  geom_point(aes(color = TreatmentGroup), position = position_dodge(width = 0.8), 
             size = 3, shape = 16) +  # Overlay raw data points
  labs(
    x = "Adverse Events",
    y = "Drug Concentration",
    title = "Boxplot of Drug Concentration by Adverse Events and Treatment"
  ) +
  scale_color_manual(values = c("A" = "blue", "B" = "red")) +  # Customize color for each treatment
  theme_minimal() +
  theme(legend.position = "top")
plot(p2)
```
## save data
```{r}
write.csv(syn_dat2, here("syn_dat2.csv"), row.names = FALSE)
```

